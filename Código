#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal_I2C.h>

#define SS_PIN 10
#define RST_PIN 9
#define NUM_STRINGS 11
#define MAX_LENGTH 10

#define cartaTelefone "93CF6832"
#define cartaCarro ""
#define cartaCasa ""
#define cartaBola ""
#define cartaComer ""
#define cartaBeber ""
#define cartaBrincar ""
#define cartaCopo ""
#define cartaTchau ""
#define cartaPapel ""
#define cartaObrigado ""

byte randomindex;
LiquidCrystal_I2C lcd(0x27, 20, 4); // Verifique o endereço do seu LCD, pode ser diferente (0x3F, 0x27, etc.)
int LED_R[] = {2, 8};
int LED_G[] = {4, 5};

char PALAVRAS[NUM_STRINGS][MAX_LENGTH] = {
  {"telefone"}, {"carro"}, {"casa"}, {"bola"}, {"comer"}, 
  {"beber"}, {"brincar"}, {"copo"}, {"tchau"}, {"papel"}, {"obrigado"}
};

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance.

void setup() {
  for (int i = 0; i < 2; i++) {
    pinMode(LED_R[i], OUTPUT);
    pinMode(LED_G[i], OUTPUT);
  }

  Serial.begin(9600);  // Initiate a serial communication
  SPI.begin();         // Initiate SPI bus
  mfrc522.PCD_Init();  // Initiate MFRC522

  lcd.init();          // Initialize the LCD
  lcd.backlight();     // Turn on the backlight

  Serial.println("Put your card to the reader...");
  Serial.println();
}

void loop() {
  randomindex = random(NUM_STRINGS);  // Gera número aleatório de 0 a 10

  lcd.clear();  // Clear the LCD
  lcd.setCursor(5, 0);
  lcd.print(PALAVRAS[randomindex]);
  lcd.setCursor(2, 2);
  lcd.print("Aproxime a carta");
  lcd.setCursor(3, 3);
  lcd.print("correspondente");

  while (true) {
    // Look for new cards
    if (!mfrc522.PICC_IsNewCardPresent()) {
      continue;
    }
    
    // Select one of the cards
    if (!mfrc522.PICC_ReadCardSerial()) {
      continue;
    }

    // Show UID on serial monitor
    String content = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : ""));
      content.concat(String(mfrc522.uid.uidByte[i], HEX));
    }
    content.toUpperCase();

    // Remove the first character "0" if present
    if (content.startsWith("0")) {
      content = content.substring(1);
    }

    Serial.println("UID tag: " + content);
    
    if (isCorrectCard(content, randomindex)) {
      displayResult("Carta correta!", true);
    } else {
      displayResult("Carta incorreta!", false);
    }
    
    delay(2000);  // Delay before starting over
    break;  // Exit the while loop to start over in the main loop
  }
}

bool isCorrectCard(String content, int index) {
  switch (index) {
    case 0: return content.equalsIgnoreCase(cartaTelefone);
    case 1: return content.equalsIgnoreCase(cartaCarro);
    case 2: return content.equalsIgnoreCase(cartaCasa);
    case 3: return content.equalsIgnoreCase(cartaBola);
    case 4: return content.equalsIgnoreCase(cartaComer);
    case 5: return content.equalsIgnoreCase(cartaBeber);
    case 6: return content.equalsIgnoreCase(cartaBrincar);
    case 7: return content.equalsIgnoreCase(cartaCopo);
    case 8: return content.equalsIgnoreCase(cartaTchau);
    case 9: return content.equalsIgnoreCase(cartaPapel);
    case 10: return content.equalsIgnoreCase(cartaObrigado);
    default: return false;
  }
}

void displayResult(String message, bool success) {
  lcd.clear();
  lcd.setCursor(3, 1);
  lcd.print(message);

  int *leds = success ? LED_G : LED_R;
  for (int i = 0; i < 2; i++) {
    digitalWrite(leds[i], HIGH);
  }
  delay(2000);
  for (int i = 0; i < 2; i++) {
    digitalWrite(leds[i], LOW);
  }
}
